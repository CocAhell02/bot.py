import random
import sqlite3
from datetime import datetime
from aiogram.types import InlineKeyboardMarkup, KeyboardButton
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.dispatcher.filters import Text
from aiogram.utils import executor
from filters import IsAdminFilter
from asyncio import sleep

TOKEN = "1851633847:AAEeM50BU2StVFqBSgWdY0mCWZR9dfqmkes"
ADMIN_ID = 1004250581

bot = Bot(token=TOKEN, parse_mode="html")
dp = Dispatcher(bot)

dp.filters_factory.bind(IsAdminFilter)

@dp.message_handler(commands=['start'])
async def start_message(msg: types.Message):
    startbtn = InlineKeyboardMarkup()
    btn1 = KeyboardButton(text="üíà–ò–≥—Ä—ã", callback_data="game_cmd")
    btn2 = KeyboardButton(text="–û—Å–Ω–æ–≤–Ω—ã–µüöÄ", callback_data="all_cmd")
    btn3 = KeyboardButton(text="‚≠ê–ü–æ–¥–¥–µ—Ä–∂–∫–∞‚≠ê", url="https://t.me/CocAhell")
    startbtn.add(btn1,btn2)
    startbtn.add(btn3)
    await msg.answer(f'<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é {msg.from_user.first_name}!</b>', reply_markup=startbtn)
    conn = sqlite3.connect('limite.db')
    bd = conn.cursor()
    bd.execute(f'SELECT * FROM limits WHERE id = (?)', (msg.from_user.id, ))
    #–≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É
    data1 = bd.fetchone()
    
    connection = sqlite3.connect('useridb.db')
    db = connection.cursor()
    db.execute("""CREATE TABLE IF NOT EXISTS useri (
    id BIGINT,
    money BIGINT,
    ban INT,
    max_give BIGINT,
    bon BIGINT,
    glob INT,
    nick TEXT,
    dick TEXT,
    status TEXT
    )""")
    connection.commit()
    # –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –≤ —Ç–∞–±–ª–∏—Ü—É users –∏ –∏—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≥–¥–µ
    # chat_id = message.from_user.id
    db.execute("SELECT * FROM useri WHERE id = (?)", (msg.from_user.id, ))
    #–≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É
    data = db.fetchone()
    # –µ—Å–ª–∏ –Ω–µ—Ç—É —Ç–∞–∫–æ–≥–æ
    if data1 is None:
            await dp.bot.send_message(1004250581, text=f"+–ª–∏–º–∏—Ç—Å - <a href='tg://user?id={msg.from_user.id}'>{msg.from_user.first_name}</a>")
            bd.execute(f"INSERT INTO limits VALUES (?, ?, ?, ?)", ("0", "0", "0", msg.from_user.id))
            conn.commit()
            
    if data is None:
        await dp.bot.send_message(msg.chat.id, text="–ë–æ–Ω—É—Å–æ–º –≤–∞–º –≤—ã–¥–∞–Ω–Ω–æ <b>5.000</b>üí∞")
        await dp.bot.send_message(1004250581, text=f"#–Ω–æ–≤—ã–π_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\n–ù–∏–∫: <a href='tg://user?id={msg.from_user.id}'>{msg.from_user.first_name}</a>\n–ò–¥: <code>{msg.from_user.id}</code>")
        # –¥–æ–±–∞–≤–∏–º –≤ –±–∞–∑—É
        db.execute(f"INSERT INTO useri VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)", (msg.from_user.id, 5000, 0, 10000, 0, 0, f"{msg.from_user.first_name}", "0", "0"))
        connection.commit()
            
@dp.message_handler(commands=['date'])
async def start_message(msg: types.Message):
    current_datetime = datetime.now().date()
    print(current_datetime)

@dp.message_handler(commands=['crt'])
async def start_message(msg: types.Message):
    connection = sqlite3.connect('limite.db')
    db = connection.cursor()
    db.execute("""CREATE TABLE IF NOT EXISTS limits (
    bonus TEXT,
    ledenec TEXT,
    click TEXT,
    id BIGINT
    )""")
    connection.commit()
    await msg.answer("–í—Å—ë, –±–æ–ª—å—à–µ –Ω–µ –Ω–∞–¥–æ!")
        
@dp.callback_query_handler(text="game_cmd")
async def send_random_value(call: types.CallbackQuery):
    exitbtn = InlineKeyboardMarkup()
    exit1 = KeyboardButton(text="‚Ü©Ô∏è–ù–∞–∑–∞–¥", callback_data="exit")
    exitbtn.add(exit1)
    await call.message.delete()
    await call.message.answer("<b>–ò–≥—Ä–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n<code>–°–ª–æ—Ç (—á–∏—Å–ª–æ)</code> - <b>–∏–≥—Ä–∞ —Å–ª–æ—Ç</b>\n<code>–ë–∞—Å (—á–∏—Å–ª–æ)</code> - <b>–∏–≥—Ä–∞ –±–∞—Å</b>\n<code>–ë–æ—É–ª (—á–∏—Å–ª–æ)</code> - <b>–∏–≥—Ä–∞ –±–æ—É–ª</b>\n<code>–§—É—Ç (—á–∏—Å–ª–æ)</code> - <b>–∏–≥—Ä–∞ —Ñ—É—Ç</b>\n<code>–î—Ä–æ—Ç–∏–∫ (—á–∏—Å–ª–æ)</code> - <b>–∏–≥—Ä–∞ –¥—Ä–æ—Ç–∏–∫</b>\n<code>/dice (—Å—Ç–∞–≤–∫–∞) (—á–∏—Å–ª–æ)</code> - <b>–∏–≥—Ä–∞ –∫—É–±–∏–∫</b>\n<code>–ë –∏–ª–∏ –ë–∞–ª–∞–Ω—Å</code> - <b>–≤–∞—à –±–∞–ª–∞–Ω—Å</b>\n<code>–ë–æ–Ω—É—Å</code> - <b>–≤–∑—è—Ç—å –±–æ–Ω—É—Å</b>\n<code>–ö–æ–∫–∞ –∏–Ω—Ñ–æ</code> - <b>–≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>", reply_markup=exitbtn)
    
@dp.callback_query_handler(text="all_cmd")
async def send_random_value(call: types.CallbackQuery):
    exitbtn = InlineKeyboardMarkup()
    exit1 = KeyboardButton(text="‚Ü©Ô∏è–ù–∞–∑–∞–¥", callback_data="exit")
    exitbtn.add(exit1)
    await call.message.delete()
    await call.message.answer("<b>–Ø –Ω–∞—Ö–æ–∂—É—Å—å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.</b>\n\n<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n\n<code>!ban</code>, <code>!–±–∞–Ω</code> - <b>–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≥—Ä—É–ø–ø—ã!</b>\n<code>!unban</code>, <code>!—Ä–∞–∑–±–∞–Ω</code> - <b>—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≥—Ä—É–ø–ø—ã!</b>\n<code>!kick</code>, <code>!–∫–∏–∫</code> - <b>–∫–∏–∫–Ω—É—Ç—å/–≤—ã–≥–Ω–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≥—Ä—É–ø–ø—ã!</b>\n<code>!mute</code>, <code>!–º—É—Ç</code> - <b>–≤—ã–¥–∞—Ç—å –º—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≥—Ä—É–ø–ø—ã!</b>\n<code>!unmute</code>, <code>!—Ä–∞–∑–º—É—Ç</code> - <b>—Å–Ω—è—Ç—å –º—É—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≥—Ä—É–ø–ø—ã!</b>\n<code>!dm</code>, <code>!—É–¥–∞–ª–∏—Ç—å</code> - <b>—É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ!</b>\n<code>!promote</code> - <b>–≤—ã–¥–∞—Ç—å –∞–¥–º–∏–Ω–∫—É!</b>\n<code>!unpromote</code> - <b>–∑–∞–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω–∫—É!</b>\n<code>!pin</code> - <b>–∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ!</b>\n<code>!unpin</code> - <b>–æ—Ç–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ!</b>\n<code>!unpin_all</code> - <b>–æ—Ç–∫—Ä–µ–ø–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è!</b>", reply_markup=exitbtn)

@dp.callback_query_handler(text="exit")
async def send_random_value(call: types.CallbackQuery):
    startbtn = InlineKeyboardMarkup()
    btn1 = KeyboardButton(text="üíà–ò–≥—Ä—ã", callback_data="game_cmd")
    btn2 = KeyboardButton(text="–û—Å–Ω–æ–≤–Ω—ã–µüöÄ", callback_data="all_cmd")
    btn3 = KeyboardButton(text="‚≠ê–ü–æ–¥–¥–µ—Ä–∂–∫–∞‚≠ê", url="https://t.me/CocAhell")
    startbtn.add(btn1,btn2)
    startbtn.add(btn3)
    await call.message.delete()
    await call.message.answer("<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>", reply_markup=startbtn)
    
@dp.message_handler(commands=['ras'])
async def bot_message(msg: types.Message):
    if msg.chat.id == ADMIN_ID:
        s = msg.text
        word = s.replace('/ras', '').split(" ", 1)
        try:
            connection = sqlite3.connect('useridb.db')
            db = connection.cursor()
            db.execute(f'SELECT * FROM useri')
        # –≤—ã—Ç–∞—â–∏–º –≤—Å–µ—Ö
            row = db.fetchall()
        
        # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–∏ –µ—Å—Ç—å 
            if len(row) > 0:
                print(f"{word[1]}")
                await msg.answer("–ó–∞–ø—É—Å–∫–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
               # –Ω–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–±–æ—Ä
                num = 0
                good = 0
                nogood = 0
                allg = 0
                for iu in row:
                    num += 1
                    chat_id = str(iu[0])
                    try:
                        await dp.bot.send_message(chat_id, text=f"{word[1]}")
                        allg += 1
                        good += 1
                        
                    except Exception:
                        nogood += 1
                    if num % 25:
                        await sleep(1)
                else:
                    await msg.answer(f"–í—Å–µ–≥–æ: {allg}\n–£–¥–∞—á–Ω–æ: {good}\n–ù–µ—É–¥–∞—á–Ω–æ: {nogood}")
        except IndexError:
            await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏")
        else:
            return
            
@dp.message_handler(commands=['addglob'])
async def addglob(msg: types.Message):
     await msg.answer("–ü–æ—Ç–æ–º —Å–¥–ª–∞—é")
     
@dp.message_handler(commands=['dice'])
async def bot_message(msg: types.Message):
    connection = sqlite3.connect('useridb.db')
    db = connection.cursor()
    db.execute(f'SELECT * FROM useri WHERE id = (?)', (msg.from_user.id, ))
    #–≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É
    data = db.fetchone()
    s = msg.text
    word = s.replace('/dice', '').split(" ", 2)
    try:
        print(word[1])
        if int(word[1]) < 1:
            await msg.answer("–í–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6")
        elif int(word[1]) > 6:
        	await msg.answer("–í–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6")
        else:
            bot_data = await dp.bot.send_dice(msg.chat.id)
            bot_data = bot_data['dice']['value']
            if int(word[1]) == bot_data:
                result = f"–í—ã–∏–≥—Ä—ã—à +{int(word[2])*1.5}"
                rest = int(word[2])*1.5
            else:
                result = f"–ü—Ä–æ–∏–≥—Ä—ã—à -{int(word[2])}" 
                rest = -int(word[2])
            await dp.bot.send_message(msg.chat.id, text=f"–í—ã–ø–∞–ª–æ: {bot_data}\n–í–∞—à–µ —á–∏—Å–ª–æ: {word[1]}\n\n{result}")
            db.execute(f"Update useri set money={data[1]} + {rest} WHERE id = (?)", (msg.from_user.id, ))
            connection.commit()
    except IndexError:
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ <code>/dice ¬´—á–∏—Å–ª–æ¬ª ¬´—Å—Ç–∞–≤–∫–∞¬ª</code>")
    else:
        return

@dp.message_handler(commands=['money'])
async def agive_message(msg: types.Message):
    if msg.chat.id == ADMIN_ID:
        connection = sqlite3.connect('useridb.db')
        db = connection.cursor()
        db.execute(f'SELECT * FROM useri WHERE id = (?)', (msg.from_user.id, ))
        #–≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É
        data = db.fetchone()
        s = msg.text
        word = s.replace('/money', '').split(" ", 2)
        try:
            await msg.answer(f"–ë–∞–ª–∞–Ω—Å <code>{word[1]}</code> –∏–∑–º–µ–Ω—ë–Ω, –∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç <b>{round(data[1]+int(word[2]))}</b>")
            db.execute(f"Update useri set money={data[1]} + {int(word[2])} WHERE id = (?)", (int(word[1]), ))
            connection.commit()
        except IndexError:
            await msg.answer("–í–≤–µ–¥–∏—Ç–µ –∏–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        else:
            return

@dp.message_handler(commands=['help']) 
async def help_message(message: types.Message): 
    await message.reply("<b>–Ø –Ω–∞—Ö–æ–∂—É—Å—å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.</b>\n\n<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n\n<code>!ban</code>, <code>!–±–∞–Ω</code> - <b>–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≥—Ä—É–ø–ø—ã!</b>\n<code>!unban</code>, <code>!—Ä–∞–∑–±–∞–Ω</code> - <b>—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≥—Ä—É–ø–ø—ã!</b>\n<code>!kick</code>, <code>!–∫–∏–∫</code> - <b>–∫–∏–∫–Ω—É—Ç—å/–≤—ã–≥–Ω–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≥—Ä—É–ø–ø—ã!</b>\n<code>!mute</code>, <code>!–º—É—Ç</code> - <b>–≤—ã–¥–∞—Ç—å –º—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≥—Ä—É–ø–ø—ã!</b>\n<code>!unmute</code>, <code>!—Ä–∞–∑–º—É—Ç</code> - <b>—Å–Ω—è—Ç—å –º—É—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≥—Ä—É–ø–ø—ã!</b>\n<code>!dm</code>, <code>!—É–¥–∞–ª–∏—Ç—å</code> - <b>—É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ!</b>\n<code>!promote</code> - <b>–≤—ã–¥–∞—Ç—å –∞–¥–º–∏–Ω–∫—É!</b>\n<code>!unpromote</code> - <b>–∑–∞–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω–∫—É!</b>\n<code>!pin</code> - <b>–∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ!</b>\n<code>!unpin</code> - <b>–æ—Ç–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ!</b>\n<code>!unpin_all</code> - <b>–æ—Ç–∫—Ä–µ–ø–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è!</b>")
    
@dp.message_handler(commands=['gay'])
async def help_message(message: types.Message):
    await message.reply("üåà–¢—ã –≥–µ–π –Ω–∞ " + str(random.randint(1, 100)) + "%")
    

@dp.message_handler(commands=['bot'])
async def bot_message(message:types.Message):
    await message.reply("–ß–ï–ì–û –¢–ï–ë–ï –ß–ï–õ–û–í–ï–öüëø")
    
@dp.message_handler(commands=["rules"])
async def rules(message: types.Message):
    await message.reply("""<a href="https://telegra.ph/Pravila-06-25-8">–ü–†–ê–í–ò–õ–ê</a>""")

@dp.message_handler(Text("@CocAhell", ignore_case=True))
async def kras(message: types.Message):
    await message.reply("–ü—Ä–æ—à—É –Ω–µ —Ç—ç–≥–∞—Ç—å –µ–≥–æ –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã!")

@dp.message_handler(Text(["–ë–æ—Ç!", "/bot", "!–±–æ—Ç"],ignore_case=True))
async def bot(message: types.Message):
    bot_tag = ["–ß–¢–û–û–û–û–û?!","–ù–µ—Ç—É –µ–≥–æ.","@CocABlog:)","–°–ª—É—à–∞—é","–°–∞–º —Ç—ã –±–æ—Çüëø","–•—ç—ç—ç—ç–π!","–ì–æ–≤–æ—Ä–∏","–ò —á–µ? –ò —á–µ?"]
    await message.reply(f"{random.choice(bot_tag)}\n–ó–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫. ‚åö")

@dp.message_handler(content_types=["new_chat_members"])
async def new(message: types.Message):
    await message.answer(f"""–ü—Ä–∏–≤–µ—Å—Ç–≤—É—é —Ç–µ–±—è <a href="tg://user?id={message.from_user.id}">{message.from_user.first_name}</a>, –≤ –Ω–∞—à–µ–º —É—é—Ç–Ω–æ–º —á–∞—Ç–µ, –Ω–æ –ø—Ä–æ—à—É —Ç–µ–±—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ /rules""")

@dp.message_handler(content_types=["left_chat_member"])
async def left(message: types.Message):
    left = ["–Ω—É –∏ –≤–∞–ª–∏...","–¢—ã –∫—É–¥–∞?!","–ë–ª@—Ç–±.","–¢–µ–±–µ –∏ —Ç–∞–∫ —Ç—É—Ç –±—ã–ª–∏ –Ω–µ —Ä–∞–¥—ã...","–ù—É –Ω–∞–∫–æ–Ω–µ—Ü—Ç–æ!","–ü–µ—á–∞–ª—å,–±–µ–¥–∞:("]
    await message.reply(f"{random.choice(left)}")

@dp.message_handler(Text("!gay",ignore_case=True))
async def gay(message: types.Message):
    if not message.reply_to_message:
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ !")
        return
    
    await message.answer(f"""<a href="tg://user?id={message.reply_to_message.from_user.id}>{message.reply_to_message.from_user.first_name}</a> –≥–µ–π –Ω–∞ {random.randint(0,100)}%""")

@dp.message_handler(is_admin=True, commands=["mute","–º—É—Ç"], commands_prefix="!")
async def mute(message: types.Message):
    if not message.reply_to_message:
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ !")
        return

    user = await message.bot.get_chat_member(message.chat.id, message.reply_to_message.from_user.id)
    if user.is_chat_admin():
        await message.reply("–ù–µ –±—Ä–æ, —è –Ω–µ –±—É–¥—É –≥–ª—É—à–∏—Ç—å –∞–¥–º–∏–Ω–∞.")
        return
    
    await message.bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id, types.ChatPermissions())
    
    await message.answer(f"""<a href="tg://user?id={message.from_user.id}">{message.from_user.id}<a> –∑–∞–º—É—Ç–∏–ª(–∞) <a href="tg://user?id={message.reply_to_message.from_user.id}">{message.reply_to_message.from_user.first_name}</a>""")

@dp.message_handler(is_admin=True, commands=["unmute","—Ä–∞–∑–º—É—Ç"], commands_prefix="!")
async def unmute(message: types.Message):
    if not message.reply_to_message:
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ !")
        return
    
    await message.bot.restrict_chat_member(message.chat.id, message.reply_to_message.from_user.id, types.ChatPermissions(True))
    
    await message.answer(f"""–û–ö. <a href='tg://user?id={message.reply_to_message.from_user.id}'>{message.reply_to_message.from_user.first_name}</a> –º–æ–∂–µ—Ç —Å–ø–æ–∫–æ–π–Ω–æ –≥–æ–≤–æ—Ä–∏—Ç—å, –Ω–æ –ø—É—Å—Ç—å –ø—Ä–∏–¥–µ—Ä–∂–∏—Ç —è–∑—ã–∫ –∑–∞ –∑—É–±–∞–º–∏.""")

@dp.message_handler(is_admin=True, commands=["ban","–±–∞–Ω","–±–∞–Ω–∞–Ω"], commands_prefix="!")
async def ban(message: types.Message):
    if not message.reply_to_message:
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ !")
        return

    user = await message.bot.get_chat_member(message.chat.id, message.reply_to_message.from_user.id)
    if user.is_chat_admin():
        await message.reply("–ù–µ –±—Ä–æ, —è –Ω–µ –±—É–¥—É –±–∞–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∞.")
        return

    await message.bot.kick_chat_member(chat_id=message.chat.id, user_id=message.reply_to_message.from_user.id)
    
    await message.answer(f"""<a href="tg://user?id={message.from_user.id}">{message.from_user.id}<a> –∑–∞–±–∞–Ω–∏–ª(–∞) <a href="tg://user?id={message.reply_to_message.from_user.id}">{message.reply_to_message.from_user.first_name}</a>""")

@dp.message_handler(is_admin=True, commands=["unban","—Ä–∞–∑–±–∞–Ω"], commands_prefix="!")
async def unban(message: types.Message):
    if not message.reply_to_message:
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ !")
        return
    
    await message.bot.unban_chat_member(chat_id=message.chat.id, user_id=message.reply_to_message.from_user.id)
    
    await message.answer(f"""<a href="tg://user?id={message.from_user.id}">{message.from_user.id}<a> —Ä–∞–∑–±–∞–Ω–∏–ª(–∞) <a href="tg://user?id={message.reply_to_message.id}">{message.reply_to_message.first_name}</a>""")

@dp.message_handler(is_admin=True, commands=['dm',"—É–¥–∞–ª–∏—Ç—å"], commands_prefix="!")
async def delete_message(message: types.Message):
    if not message.reply_to_message:
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ !")
        return

    user = await message.bot.get_chat_member(message.chat.id, message.reply_to_message.from_user.id)
    if user.is_chat_admin():
        await message.reply("–ù–µ –±—Ä–æ, —è –Ω–µ –±—É–¥—É —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞.")
        return

    await message.reply_to_message.delete()
    await message.reply("–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ !")

@dp.message_handler(content_types=["text"])
async def chat_comand(msg: types.Message):
    connection = sqlite3.connect('useridb.db')
    db = connection.cursor()
    db.execute(f'SELECT * FROM useri WHERE id = (?)', (msg.from_user.id, ))
    #–≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É
    data = db.fetchone()
    txt = msg.text.lower()
    if txt.startswith('–±–∞—Å') == True:
        param = txt[4:]
        if param != '':
            word = int(param)
            try:
                if int(word) < 1:
                    await msg. answer("<b>–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 1!</b>")
                elif int(word) > int(data[1]):
                    await msg.answer(f"<b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!</b>\n–í–∞—à –±–∞–ª–∞–Ω—Å: <b>{data[1]}</b>")
                else:
                    print(word)
                    bot_data = await dp.bot.send_dice(msg.chat.id, emoji="üèÄ")
                    bot_data = bot_data['dice']['value']
                    await sleep(5)
                    if bot_data == 1:
                        result = f"–ü—Ä–æ–º–∞—Ö! <b>-{word}</b>"
                        rest = -int(word)
                    elif bot_data == 2:
                        result = f"–ü—Ä–æ–º–∞—Ö! <b>-{word}</b>"
                        rest = -int(word)
                    elif bot_data == 3:
                        result = f"–ü—Ä–æ–º–∞—Ö! <b>-{word}</b>"
                        rest = -int(word)
                    elif bot_data == 4:
                        result = f"–ü–æ–ø–∞–¥–∞–Ω–∏–µ! <b>+{int(word)*1.5}</b>"
                        rest = int(word)*1.5
                    elif bot_data == 5:
                        result = f"–í —Ç–æ—á–∫—É! <b>+{int(word)*2}</b>"
                        rest = int(word)*2
                    await msg.answer(f"{result}")
                    db.execute(f"Update useri set money={data[1]} + {rest} WHERE id = (?)", (msg.from_user.id, ))
                    connection.commit()
            except IndexError:
                await msg.answer("–í–≤–µ–¥–∏—Ç–µ <code>–ë–∞—Å ¬´—Å—Ç–∞–≤–∫–∞¬ª</code>")
            else:
                return
    elif msg.text.lower().startswith('—Ñ—É—Ç') == True:
        txt = msg.text.lower()
        param = txt[4:]
        if param != '':
            word = int(param)
            try:
                if int(word) < 1:
                    await msg. answer("<b>–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 1!</b>")
                elif int(word) > int(data[1]):
                    await msg.answer(f"<b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!</b>\n–í–∞—à –±–∞–ª–∞–Ω—Å: <b>{data[1]}</b>")
                else:
                    print(word)
                    bot_data = await dp.bot.send_dice(msg.chat.id, emoji="‚öΩ")
                    bot_data = bot_data['dice']['value']
                    await sleep(5)
                    if bot_data == 1:
                        result = f"–ü—Ä–æ–º–∞—Ö! <b>-{word}</b>"
                        rest = -int(word)
                    elif bot_data == 2:
                        result = f"–ü—Ä–æ–º–∞—Ö! <b>-{word}</b>"
                        rest = -int(word)
                    elif bot_data == 3:
                        result = f"–ü—Ä–æ–º–∞—Ö! <b>-{word}</b>"
                        rest = -int(word)
                    elif bot_data == 4:
                        result = f"–ü–æ–ø–∞–¥–∞–Ω–∏–µ! <b>+{int(word)*1.5}</b>"
                        rest = int(word)*1.5
                    elif bot_data == 5:
                        result = f"–í —Ç–æ—á–∫—É! <b>+{int(word)*2}</b>"
                        rest = int(word)*2
                    await msg.answer(f"{result}")
                    db.execute(f"Update useri set money={data[1]} + {rest} WHERE id = (?)", (msg.from_user.id, ))
                    connection.commit()
            except IndexError:
                await msg.answer("–í–≤–µ–¥–∏—Ç–µ <code>–§—É—Ç ¬´—Å—Ç–∞–≤–∫–∞¬ª</code>")
            else:
                return
    elif msg.text.lower().startswith('–±–æ—É–ª') == True:
        txt = msg.text.lower()
        param = txt[5:]
        if param != '':
            word = int(param)
            try:
                if int(word) < 1:
                    await msg. answer("<b>–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 1!</b>")
                elif int(word) > int(data[1]):
                    await msg.answer(f"<b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!</b>\n–í–∞—à –±–∞–ª–∞–Ω—Å: <b>{data[1]}</b>")
                else:
                    print(word)
                    bot_data = await dp.bot.send_dice(msg.chat.id, emoji="üé≥")
                    bot_data = bot_data['dice']['value']
                    await sleep(5)
                    if bot_data == 1:
                        result = f"–ü—Ä–æ–º–∞—Ö! <b>-{word}</b>"
                        rest = -int(word)
                    elif bot_data == 2:
                        result = f"–ü—Ä–æ–º–∞—Ö! <b>-{word}</b>"
                        rest = -int(word)
                    elif bot_data == 3:
                        result = f"–ü—Ä–æ–º–∞—Ö! <b>-{word}</b>"
                        rest = -int(word)
                    elif bot_data == 4:
                        result = f"–ü–æ–ø–∞–¥–∞–Ω–∏–µ! <b>+{int(word)*1.5}</b>"
                        rest = int(word)*1.5
                    elif bot_data == 5:
                        result = f"–í —Ç–æ—á–∫—É! <b>+{int(word)*2}</b>"
                        rest = int(word)*2
                    elif bot_data == 6:
                        result = f"–í —Ç–æ—á–∫—É! <b>+{int(word)*2}</b>"
                        rest = int(word)*2
                    await msg.answer(f"{result}")
                    db.execute(f"Update useri set money={data[1]} + {rest} WHERE id = (?)", (msg.from_user.id, ))
                    connection.commit()
            except IndexError:
                await msg.answer("–í–≤–µ–¥–∏—Ç–µ <code>–ë–æ—É–ª ¬´—Å—Ç–∞–≤–∫–∞¬ª</code>")
            else:
                return
    elif msg.text.lower().startswith('–¥—Ä–æ—Ç–∏–∫') == True:
        txt = msg.text.lower()
        param = txt[7:]
        if param != '':
            word = int(param)
            try:
                if int(word) < 1:
                    await msg. answer("<b>–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 1!</b>")
                elif int(word) > int(data[1]):
                    await msg.answer(f"<b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!</b>\n–í–∞—à –±–∞–ª–∞–Ω—Å: <b>{data[1]}</b>")
                else:
                    print(word)
                    bot_data = await dp.bot.send_dice(msg.chat.id, emoji="üéØ")
                    bot_data = bot_data['dice']['value']
                    await sleep(5)
                    if bot_data == 1:
                        result = f"–ü—Ä–æ–º–∞—Ö! <b>-{word}</b>"
                        rest = -int(word)
                    elif bot_data == 2:
                        result = f"–ü—Ä–æ–º–∞—Ö! <b>-{word}</b>"
                        rest = -int(word)
                    elif bot_data == 3:
                        result = f"–ü—Ä–æ–º–∞—Ö! <b>-{word}</b>"
                        rest = -int(word)
                    elif bot_data == 4:
                        result = f"–ü–æ–ø–∞–¥–∞–Ω–∏–µ! <b>+{int(word)*1.5}</b>"
                        rest = int(word)*1.5
                    elif bot_data == 5:
                        result = f"–í —Ç–æ—á–∫—É! <b>+{int(word)*2}</b>"
                        rest = int(word)*2
                    await msg.answer(f"{result}")
                    db.execute(f"Update useri set money={data[1]} + {rest} WHERE id = (?)", (msg.from_user.id, ))
                    connection.commit()
            except IndexError:
                await msg.answer("–í–≤–µ–¥–∏—Ç–µ <code>–î—Ä–æ—Ç–∏–∫ ¬´—Å—Ç–∞–≤–∫–∞¬ª</code>")
            else:
                return
    elif msg.text.lower() == '–∫–æ–∫–∞ –∏–Ω—Ñ–æ':
            if data[2] == 1:
                cs = "–î–∞"
            else:
                cs = "–ù–µ—Ç"
            if data[5] == 1:
                glob = "–î–∞"
            else:
                glob = "–ù–µ—Ç"
            await msg.answer(f"–ò–º—è: <b>{msg.from_user.first_name}</b>‚ÑπÔ∏è\n„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è\n–ò–¥: <code>{msg.from_user.id}</code>üÜî\n„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è\n–ú–æ–Ω–µ—Ç—ã: <b>{round(data[1])}</b>üí∞\n„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è\n–°–µ—Ä–¥–µ—Ü: <b>{data[4]}</b>‚ù§Ô∏è\n„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è\n–ê–¥–º–∏–Ω –±–æ—Ç–∞: <b>{glob}</b>üëÆ‚Äç‚ôÇÔ∏è\n„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è\n–í —á—Å: <b>{cs}</b>üö´\n„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è\n–õ–∏–º–∏—Ç: <b>{data[3]}</b>‚è≥")
    elif msg.text.lower() == '–±–∞–ª–∞–Ω—Å':
        await msg.answer(f"–ë–∞–ª–∞–Ω—Å: {str(round(data[1]))}")
    elif msg.text.lower() == '–±':
        await msg.answer(f"–ë–∞–ª–∞–Ω—Å: {str(round(data[1]))}")
    elif msg.text.lower() == '–±–æ–Ω—É—Å':
        bon = random.randint(1000, 5000)
        if data[1] > 50:
            await msg.answer(f"–ë–æ–Ω—É—Å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –µ—Å–ª–∏ –±–∞–ª–∞–Ω—Å –º–µ–Ω—å—à–µ 50 –º–æ–Ω–µ—Ç!\n–£ –≤–∞—Å: <b>{round(data[1])}</b>")
        else:
            await msg.answer(f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ <b>{bon} –º–æ–Ω–µ—Ç</b>!\n–ë–∞–ª–∞–Ω—Å: <b>{int(round(data[1])+bon)}</b>")
            db.execute(f"Update useri set money={data[1]} + {int(bon)} WHERE id = (?)", (msg.from_user.id, ))
            connection.commit()
                
    elif msg.text.lower().startswith('—Å–ª–æ—Ç') == True:
        txt = msg.text.lower()
        param = txt[5:]
        if param != '':
            word = int(param)
            try:
                if data[1] < int(word):
                    await msg.answer("<b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!</b>")
                elif word < 1:
                    await msg.answer("<b>–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 1!</b>")
                else:
                    arr = ["‚≠ê","üëç","‚ù§Ô∏è","üëø","‚öîÔ∏è"]
                    a = random.choice(arr)
                    b = random.choice(arr)
                    c = random.choice(arr)
                    print(f"{word}")
                    await msg.reply("|"+a+"|"+b+"|"+c+"|")
                    if a == b == c:
                        await msg.answer(f"–î–∂—ç–∫–ø–æ—Ç! +{word*3}")
                        db.execute(f"Update useri set money={data[1]} + {word*3} WHERE id = (?)", (int(data[0]), ))
                        connection.commit()
                    elif a == b:
                        await msg.answer(f"–ü–∞—Ä–∞! +{word*2}")
                        db.execute(f"Update useri set money={data[1]} + {word*2} WHERE id = (?)", (int(data[0]), ))
                        connection.commit()
                    elif b == c:
                        await msg.answer(f"–ü–∞—Ä–∞! +{word*2}")
                        db.execute(f"Update useri set money={data[1]} + {word*2} WHERE id = (?)", (int(data[0]), ))
                        connection.commit()
                    elif a == c:
                        await msg.answer(f"–ü–∞—Ä–∞! +{word*2}")
                        db.execute(f"Update useri set money={data[1]} + {word*2} WHERE id = (?)", (int(data[0]), ))
                        connection.commit()
                    else:
                        await msg.answer(f"–ü—Ä–æ–∏–≥—Ä—ã—à! -{word}")
                        db.execute(f"Update useri set money={data[1]} - {word} WHERE id = (?)", (int(data[0]), ))
                        connection.commit()
            except IndexError:
                await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É")
            else:
                return
            
    elif msg.text.lower() in ["+","—Å–ø—Å","—Å–ø–∞—Å–∏–±–æ"]:
        if not msg.reply_to_message:
            pass
        elif msg.reply_to_message.from_user.id == msg.from_user.id:
            pass
        else:
            connection = sqlite3.connect('useridb.db')
            db = connection.cursor()
            db.execute(f'SELECT * FROM useri WHERE id = (?)', (msg.reply_to_message.from_user.id, ))
            data1 = db.fetchone()
            try:
                await dp.bot.send_message(msg.chat.id, f"""<a href='tg://user?id={msg.from_user.id}'>{msg.from_user.first_name}</a>
–¥–∞–ª(–∞) —Å–µ—Ä–¥–µ—á–∫–æ:
<a href='tg://user?id={msg.reply_to_message.from_user.id}'>{msg.reply_to_message.from_user.first_name}</a>
–¢–µ–ø–µ—Ä—å –µ–≥–æ –∫–∞—Ä–º–∞: <b>{str(data1[4]+1)}‚ù§Ô∏è</b>""")
                db.execute(f"Update useri set bon={data1[4]} + 1 WHERE id = (?)", (msg.reply_to_message.from_user.id, ))
                connection.commit()
            except TypeError:
            	pass
    elif msg.text.lower().startswith('!–¥–∞—Ç—å') == True:
        txt = msg.text.lower()
        param = txt[6:]
        if param != '':
            word = int(param)
            try:
                if not msg.reply_to_message:
                    await msg.answer("<b>–ü–∏—à–∏ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!</b>")
                else:
                    connection = sqlite3.connect('useridb.db')
                    db = connection.cursor()
                    db.execute(f'SELECT * FROM useri WHERE id = (?)', (msg.reply_to_message.from_user.id, ))
                    data1 = db.fetchone()
                    if data[1] < int(word):
                        await msg.answer("<b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!</b>")
                    else:
                        await msg.answer(f"<a href='tg://user?id={msg.from_user.id}'>{msg.from_user.first_name}</a> –ø–µ—Ä–µ–¥–∞–ª {word} <a href='tg://user?id={msg.reply_to_message.from_user.id}'>{msg.reply_to_message.from_user.first_name}</a>")
                        db.execute(f"Update useri set money={data[1]} - {int(word)} WHERE id = (?)", (msg.from_user.id, ))
                        db.execute(f"Update useri set money={data1[1]} + {int(word)} WHERE id = (?)", (msg.reply_to_message.from_user.id, ))
                        connection.commit()
            except IndexError:
                await msg.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
            else:
                return
            
    elif msg.text.lower() == "–∫–æ–∫–∞ –≥–ª–æ–±!":
        if msg.from_user.id == ADMIN_ID:
            if not msg.reply_to_message:
                await msg.answer(f"<a href='tg://user?id={msg.from_user.id}'>–•–æ–∑—è–∏–Ω</a>, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –¥–∞—Ç—å –∞–¥–º–∏–Ω–∫—É!")
            else:
                connection = sqlite3.connect('useridb.db')
                db = connection.cursor()
                db.execute(f'SELECT * FROM useri WHERE id = (?)', (msg.reply_to_message.from_user.id, ))
                data1 = db.fetchone()
                if data1[5] == 1:
                    await msg.answer(f"<a href='tg://user?id={msg.reply_to_message.from_user.id}'>{msg.reply_to_message.from_user.first_name}</a>, –∏ —Ç–∞–∫ –∞–¥–º–∏–Ω!")
                else:
                    await msg.answer(f"<a href='tg://user?id={msg.from_user.id}'>–•–æ–∑—è–∏–Ω</a>, –≤—ã–¥–∞–ª –∞–¥–º–∏–Ω–∫—É –Ω–∞ –±–æ—Ç–∞:\n<a href='tg://user?id={msg.reply_to_message.from_user.id}'>{msg.reply_to_message.from_user.first_name}</a>")
                    db.execute(f"Update useri set glob={data1[5]} + 1 WHERE id = (?)", (msg.reply_to_message.from_user.id, ))
                    connection.commit()

    elif msg.text.lower() == "–∫–æ–∫–∞ –Ω–µ –≥–ª–æ–±!":
        if msg.from_user.id == ADMIN_ID:
            if not msg.reply_to_message:
                await msg.answer(f"<a href='tg://user?id={msg.from_user.id}'>–•–æ–∑—è–∏–Ω</a>, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞ —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω–∫—É!")
            else:
                connection = sqlite3.connect('useridb.db')
                db = connection.cursor()
                db.execute(f'SELECT * FROM useri WHERE id = (?)', (msg.reply_to_message.from_user.id, ))
                data1 = db.fetchone()
                if data1[5] == 0:
                    await msg.answer(f"<a href='tg://user?id={msg.reply_to_message.from_user.id}'>{msg.reply_to_message.from_user.first_name}</a>, –∏ —Ç–∞–∫ –Ω–µ –∞–¥–º–∏–Ω!")
                else:
                    await msg.answer(f"<a href='tg://user?id={msg.from_user.id}'>–•–æ–∑—è–∏–Ω</a>, –∑–∞–±—Ä–∞–ª –∞–¥–º–∏–Ω–∫—É –Ω–∞ –±–æ—Ç–∞ —É:\n<a href='tg://user?id={msg.reply_to_message.from_user.id}'>{msg.reply_to_message.from_user.first_name}</a>")
                    db.execute(f"Update useri set glob={data1[5]} - 1 WHERE id = (?)", (msg.reply_to_message.from_user.id, ))
                    connection.commit()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
